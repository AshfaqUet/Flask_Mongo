from ssh.supportedOperSys.base_os import BaseOs
linux_commands = {
    ' start a new process in the background ': ' & ',
    ' create an alias • ': ' alias ',
    ' search help manual pages (man -k) ': ' apropos ',
    ' search for and install software packages (debian/ubuntu) ': ' aptitude ',
    ' spell checker ': ' aspell ',
    ' find and replace text, database sort/validate/index ': ' awk ',
    ' strip directory and suffix from filenames ': ' basename ',
    ' base32 encode/decode data and print to standard output ': ' base32 ',
    ' base64 encode/decode data and print to standard output ': ' base64 ',
    ' gnu bourne-again shell ': ' bash ',
    ' arbitrary precision calculator language ': ' bc ',
    ' send to background ': ' bg ',
    ' set or display readline key and function bindings • ': ' bind ',
    ' exit from a loop • ': ' break ',
    ' run a shell builtin ': ' builtin ',
    ' compress or decompress named file(s) ': ' gzip ',
    ' display a calendar ': ' cal ',
    ' conditionally perform a command ': ' if ',
    ' concatenate and print (display) the content of files ': ' cat ',
    ' change directory ': ' cd ',
    ' partition table manipulator for linux ': ' fdisk ',
    ' change file attributes on a linux file system ': ' chattr ',
    ' change group ownership ': ' chgrp ',
    ' change access permissions ': ' chmod ',
    ' change file owner and group ': ' chown ',
    ' update passwords in batch mode ': ' chpasswd ',
    ' run a command with a different root directory ': ' chroot ',
    ' system services (runlevel) ': ' chkconfig ',
    ' print crc checksum and byte counts ': ' cksum ',
    ' clear terminal screen ': ' clear ',
    ' compare two files ': ' cmp ',
    ' compare two sorted files line by line ': ' comm ',
    ' run a command - ignoring shell functions • ': ' command ',
    ' resume the next iteration of a loop • ': ' continue ',
    ' copy one or more files to another location ': ' cp ',
    ' copy files to and from archives ': ' cpio ',
    ' daemon to execute scheduled commands ': ' cron ',
    ' schedule a command to run at a later time ': ' crontab ',
    ' split a file into context-determined pieces ': ' csplit ',
    ' transfer data from or to a server ': ' curl ',
    ' divide a file into several parts ': ' cut ',
    ' display or change the date & time ': ' date ',
    ' desk calculator ': ' dc ',
    ' data duplicator - convert and copy a file, write disk headers, boot records ': ' dd ',
    ' data recovery tool ': ' ddrescue ',
    ' declare variables and give them attributes • ': ' declare ',
    ' display free disk space ': ' df ',
    ' display the differences between two files ': ' diff ',
    ' show differences among three files ': ' diff3 ',
    ' dns lookup ': ' dig ',
    ' briefly list directory contents ': ' dir ',
    ' colour setup for \'ls': ' dircolors ',
    ' convert a full pathname to just a path ': ' dirname ',
    ' display list of remembered directories ': ' dirs ',
    ' print kernel & driver messages ': ' dmesg ',
    ' estimate file space usage ': ' du ',
    ' display message on screen • ': ' echo ',
    ' search file(s) for lines that match an extended expression ': ' egrep ',
    ' eject removable media ': ' eject ',
    ' enable and disable builtin shell commands • ': ' enable ',
    ' environment variables ': ' env ',
    ' ethernet card settings ': ' ethtool ',
    ' evaluate several commands/arguments ': ' eval ',
    ' execute a command ': ' exec ',
    ' exit the shell ': ' exit ',
    ' automate arbitrary applications accessed over a terminal ': ' expect ',
    ' convert tabs to spaces ': ' expand ',
    ' set an environment variable ': ' export ',
    ' evaluate expressions ': ' expr ',
    ' do nothing, unsuccessfully ': ' false ',
    ' low-level format a floppy disk ': ' fdformat ',
    ' send job to foreground ': ' fg ',
    ' search file(s) for lines that match a fixed string ': ' fgrep ',
    ' determine file type ': ' file ',
    ' search for files that meet a desired criteria ': ' find ',
    ' reformat paragraph text ': ' fmt ',
    ' wrap text to fit a specified width ': ' fold ',
    ' expand words, and execute commands ': ' for ',
    ' format disks or tapes ': ' format ',
    ' display memory usage ': ' free ',
    ' file system consistency check and repair ': ' fsck ',
    ' file transfer protocol ': ' ftp ',
    ' define function macros ': ' function ',
    ' identify/kill the process that is accessing a file ': ' fuser ',
    ' find and replace text within file(s) ': ' gawk ',
    ' parse positional parameters ': ' getopts ',
    ' search file(s) for lines that match a given pattern ': ' grep ',
    ' add a user security group ': ' groupadd ',
    ' delete a group ': ' groupdel ',
    ' modify a group ': ' groupmod ',
    ' print group names a user is in ': ' groups ',
    ' remember the full pathname of a name argument ': ' hash ',
    ' output the first part of file(s) ': ' head ',
    ' display help for a built-in command • ': ' help ',
    ' command history ': ' history ',
    ' print or set system name ': ' hostname ',
    ' interactive process viewer ': ' htop ',
    ' convert the character set of a file ': ' iconv ',
    ' print user and group id\'s ': ' id ',
    ' configure a network interface ': ' ifconfig ',
    ' stop a network interface ': ' ifdown ',
    ' start a network interface up ': ' ifup ',
    ' capture an x server screen and save the image to file ': ' import ',
    ' copy files and set attributes ': ' install ',
    ' report cpu and i/o statistics ': ' iostat ',
    ' routing, devices and tunnels ': ' ip ',
    ' list active jobs • ': ' jobs ',
    ' join lines on a common field ': ' join ',
    ' kill a process by specifying its pid ': ' kill ',
    ' kill processes by name ': ' pkill ',
    ' display output one screen at a time ': ' more ',
    ' perform arithmetic on shell variables • ': ' let ',
    ' create a link to a file ': ' link ',
    ' create a symbolic link to a file ': ' ln ',
    ' create a function variable • ': ' local ',
    ' find files ': ' slocate ',
    ' print current login name ': ' logname ',
    ' exit a login shell • ': ' logout ',
    ' display lines beginning with a given string ': ' look ',
    ' line printer control program ': ' lpc ',
    ' off line print ': ' lpr ',
    ' print a file ': ' lprint ',
    ' delete a print job ': ' lprintd ',
    ' list the print queue ': ' lprintq ',
    ' remove jobs from the print queue ': ' lprm ',
    ' list file attributes on a linux second extended file system ': ' lsattr ',
    ' list block devices ': ' lsblk ',
    ' list information about file(s) ': ' ls ',
    ' list open files ': ' lsof ',
    ' list all pci devices ': ' lspci ',
    ' recompile a group of programs ': ' make ',
    ' help manual ': ' man ',
    ' read lines from standard input into an indexed array variable ': ' mapfile ',
    ' create new folder(s) ': ' mkdir ',
    ' make fifos (named pipes) ': ' mkfifo ',
    ' make a file ': ' mkfile ',
    ' create a hybrid iso9660/joliet/hfs filesystem ': ' mkisofs ',
    ' make block or character special files ': ' mknod ',
    ' make a temporary file ': ' mktemp ',
    ' browse or page through a text file ': ' most ',
    ' mount a file system ': ' mount ',
    ' manipulate ms-dos files ': ' mtools ',
    ' network diagnostics (traceroute/ping) ': ' mtr ',
    ' move or rename files or directories ': ' mv ',
    ' mass move and rename (files) ': ' mmv ',
    ' netcat, read and write data across networks ': ' nc ',
    ' networking connections/stats ': ' netstat ',
    ' nftables for packet filtering and classification ': ' nft ',
    ' set the priority of a command or job ': ' nice ',
    ' number lines and write files ': ' nl ',
    ' run a command immune to hangups ': ' nohup ',
    ' send desktop notifications ': ' notify-send ',
    ' query internet name servers interactively ': ' nslookup ',
    ' open a file in its default application ': ' open ',
    ' operator access ': ' op ',
    ' modify a user password ': ' passwd ',
    ' merge lines of files ': ' paste ',
    ' check file name portability ': ' pathchk ',
    ' performance analysis tools for linux ': ' perf ',
    ' test a network connection ': ' ping ',
    ' list processes by name ': ' pgrep ',
    ' restore the previous value of the current directory ': ' popd ',
    ' prepare files for printing ': ' pr ',
    ' printer capability database ': ' printcap ',
    ' print environment variables ': ' printenv ',
    ' format and print data • ': ' printf ',
    ' process status ': ' ps ',
    ' save and then change the current directory ': ' pushd ',
    ' monitor the progress of data through a pipe ': ' pv ',
    ' print working directory ': ' pwd ',
    ' display disk usage and limits ': ' quota ',
    ' scan a file system for disk usage ': ' quotacheck ',
    ' ram disk device ': ' ram ',
    ' archive files with compression ': ' rar ',
    ' copy files between two machines ': ' rcp ',
    ' read a line from standard input • ': ' read ',
    ' read from stdin into an array variable • ': ' readarray ',
    ' mark variables/functions as readonly ': ' readonly ',
    ' reboot the system ': ' reboot ',
    ' rename files ': ' rename ',
    ' alter priority of running processes ': ' renice ',
    ' synchronize remote files via email ': ' remsync ',
    ' exit a shell function ': ' return ',
    ' reverse lines of a file ': ' rev ',
    ' remove files ': ' rm ',
    ' remove folder(s) ': ' rmdir ',
    ' remote file copy (synchronize file trees) ': ' rsync ',
    ' multiplex terminal, run remote shells via ssh ': ' screen ',
    ' secure copy (remote file copy) ': ' scp ',
    ' merge two files interactively ': ' sdiff ',
    ' stream editor ': ' sed ',
    ' accept keyboard input ': ' select ',
    ' print numeric sequences ': ' seq ',
    ' manipulate shell variables and functions ': ' set ',
    ' secure file transfer program ': ' sftp ',
    ' shift positional parameters ': ' shift ',
    ' shell options ': ' shopt ',
    ' shutdown or restart linux ': ' shutdown ',
    ' delay for a specified time ': ' sleep ',
    ' sort text files ': ' sort ',
    ' run commands from a file ': ' source ',
    ' split a file into fixed-size pieces ': ' split ',
    ' socket statistics ': ' ss ',
    ' secure shell client (remote login program) ': ' ssh ',
    ' display file or file system status ': ' stat ',
    ' trace system calls and signals ': ' strace ',
    ' substitute user identity ': ' su ',
    ' execute a command as another user ': ' sudo ',
    ' print a checksum for a file ': ' sum ',
    ' suspend execution of this shell • ': ' suspend ',
    ' synchronize data on disk with memory ': ' sync ',
    ' output the last part of a file ': ' tail ',
    ' store, list or extract files in an archive ': ' tar ',
    ' redirect output to multiple files ': ' tee ',
    ' evaluate a conditional expression ': ' test ',
    ' measure program running time ': ' time ',
    ' run a command with a time limit ': ' timeout ',
    ' user and system times ': ' times ',
    ' change file timestamps ': ' touch ',
    ' list processes running on the system ': ' top ',
    ' set terminal-dependent capabilities, color, position ': ' tput ',
    ' trace route to host ': ' traceroute ',
    ' execute a command when the shell receives a signal • ': ' trap ',
    ' translate, squeeze, and/or delete characters ': ' tr ',
    ' do nothing, successfully ': ' true ',
    ' topological sort ': ' tsort ',
    ' print filename of terminal on stdin ': ' tty ',
    ' describe a command • ': ' type ',
    ' limit user resources • ': ' ulimit ',
    ' users file creation mask ': ' umask ',
    ' unmount a device ': ' umount ',
    ' remove an alias • ': ' unalias ',
    ' print system information ': ' uname ',
    ' convert spaces to tabs ': ' unexpand ',
    ' uniquify files ': ' uniq ',
    ' convert units from one scale to another ': ' units ',
    ' extract files from a rar archive ': ' unrar ',
    ' remove variable or function names ': ' unset ',
    ' unpack shell archive scripts ': ' unshar ',
    ' execute commands (until error) ': ' until ',
    ' show uptime ': ' uptime ',
    ' create new user account ': ' useradd ',
    ' delete a user account ': ' userdel ',
    ' modify user account ': ' usermod ',
    ' list users currently logged in ': ' users ',
    ' encode a binary file ': ' uuencode ',
    ' decode a file created by uuencode ': ' uudecode ',
    ' verbosely list directory contents (\'ls -l -b\') ': ' vdir ',
    ' text editor ': ' vi ',
    ' report virtual memory statistics ': ' vmstat ',
    ' show who is logged on and what they are doing ': ' w ',
    ' wait for a process to complete • ': ' wait ',
    ' execute/display a program periodically ': ' watch ',
    ' print byte, word, and line counts ': ' wc ',
    ' search the user\'s $path, man pages and source files for a program ': ' whereis ',
    ' search the user\'s $path for a program file ': ' which ',
    ' execute commands ': ' while ',
    ' print all usernames currently logged in ': ' who ',
    ' print the current user id and name (\'id -un\') ': ' whoami ',
    ' retrieve web pages or files via http, https or ftp ': ' wget ',
    ' send a message to another user ': ' write ',
    ' execute utility, passing constructed argument list(s) ': ' xargs ',
    ' open a file or url in the user\'s preferred application. ': ' xdg-open ',
    ' compress or decompress .xz and .lzma files ': ' xz ',
    ' print a string until interrupted ': ' yes ',
    ' package and compress (archive) files. ': ' zip ',
    ' run a command script in the current shell ': ' . ',
    ' run the last command again ': ' !! ',
    ' comment / remark ': ' ### '
}


class UbuntuOs(BaseOs):
    def __init__(self, device_id):
        self.__package_manager = "apt"
        self.OS = "ubuntu"
        super().__init__('linux', device_id)

    def get_users(self):
        """
        centos related get users
        :return:
        """
        command = "w"
        result = self.execute_command(command)
        return result

    # def parse_users(self, result):
    #     pass

    def helping_function(self):
        linux_new_dict = dict()
        for command, purpose in linux_commands.items():
            print(f'{command} = {purpose}', end='\n')
            linux_new_dict[purpose] = str(command).lower()
        return linux_new_dict

    # def install_package(self, package):
    #     commands = ['sudo apt-get update', 'sudo apt install ' + str(package)]
    #     for command in commands:
    #         # self.execute_command(command)
    #         print(command)   #run command here one by one to install package
    #     pass

    # def uninstall_package(self,package):
    #     pass
